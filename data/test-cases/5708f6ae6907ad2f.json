{"uid":"5708f6ae6907ad2f","name":"test_login","fullName":"testScripts.test_login.Test_001_Login#test_login","historyId":"327d4bb550f77d7686db3dc36e2d77ec","time":{"start":1744822841312,"stop":1744822876649,"duration":35337},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <testScripts.test_login.Test_001_Login object at 0x7f23f1be7690>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a7c4b18f20fd6e546c533bf66112d8f0\")>\n\n    @pytest.mark.order(1)\n    def test_login(self, setup):\n        self.logger.info(\"******** Verifying Login test ********\")\n        self.logger.info(\"********Call the Browser Configuration********\")\n        self.driver = setup\n        self.driver.implicitly_wait(10)\n        self.driver.get(self.baseURL)\n        self.logger.info(\"********Define the LoginPage Driver********\")\n        self.lp = LoginPage(self.driver)\n        time.sleep(5)\n        self.logger.info(\"********Type the Username*******\")\n        self.lp.setUserName(self.username)\n        time.sleep(3)\n        self.logger.info(\"********Type the Password*******\")\n        self.lp.setPassword(self.password)\n        time.sleep(3)\n        self.logger.info(\"******** Click the Log in Button*******\")\n        self.lp.clickLogin()\n        time.sleep(3)\n        self.logger.info(\"******** Click the Logout Menu*******\")\n>       self.lp.logoutMenu()\n\ntestScripts/test_login.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/LoginPage.py:26: in logoutMenu\n    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"div[class='bm-burger-button'] button\"))).click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a7c4b18f20fd6e546c533bf66112d8f0\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f23f2e66020>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1744822841312,"stop":1744822841312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser","time":{"start":1744822841312,"stop":1744822841312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <testScripts.test_login.Test_001_Login object at 0x7f23f1be7690>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a7c4b18f20fd6e546c533bf66112d8f0\")>\n\n    @pytest.mark.order(1)\n    def test_login(self, setup):\n        self.logger.info(\"******** Verifying Login test ********\")\n        self.logger.info(\"********Call the Browser Configuration********\")\n        self.driver = setup\n        self.driver.implicitly_wait(10)\n        self.driver.get(self.baseURL)\n        self.logger.info(\"********Define the LoginPage Driver********\")\n        self.lp = LoginPage(self.driver)\n        time.sleep(5)\n        self.logger.info(\"********Type the Username*******\")\n        self.lp.setUserName(self.username)\n        time.sleep(3)\n        self.logger.info(\"********Type the Password*******\")\n        self.lp.setPassword(self.password)\n        time.sleep(3)\n        self.logger.info(\"******** Click the Log in Button*******\")\n        self.lp.clickLogin()\n        time.sleep(3)\n        self.logger.info(\"******** Click the Logout Menu*******\")\n>       self.lp.logoutMenu()\n\ntestScripts/test_login.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/LoginPage.py:26: in logoutMenu\n    WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"div[class='bm-burger-button'] button\"))).click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a7c4b18f20fd6e546c533bf66112d8f0\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f23f2e66020>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","steps":[],"attachments":[{"uid":"fa8b081a732c53d9","name":"log","source":"fa8b081a732c53d9.txt","type":"text/plain","size":490}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"tag","value":"order(1)"},{"name":"parentSuite","value":"testScripts"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"Test_001_Login"},{"name":"host","value":"fv-az1280-241"},{"name":"thread","value":"2785-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testScripts.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["order(1)"]},"source":"5708f6ae6907ad2f.json","parameterValues":[]}