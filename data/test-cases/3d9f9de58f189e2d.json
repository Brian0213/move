{"uid":"3d9f9de58f189e2d","name":"test_login","fullName":"testScripts.test_addproducts.Test_002_AddProducts#test_login","historyId":"78dbc3d61bbd1ad9251b9fced1918838","time":{"start":1744822876688,"stop":1744822905944,"duration":29256},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x558d668cdcea <unknown>\n#1 0x558d6637e5f0 <unknown>\n#2 0x558d663cfa33 <unknown>\n#3 0x558d663cfc21 <unknown>\n#4 0x558d6641e274 <unknown>\n#5 0x558d663f568d <unknown>\n#6 0x558d6641b660 <unknown>\n#7 0x558d663f5433 <unknown>\n#8 0x558d663c1ea3 <unknown>\n#9 0x558d663c2b01 <unknown>\n#10 0x558d66892b3b <unknown>\n#11 0x558d66896a21 <unknown>\n#12 0x558d66879c32 <unknown>\n#13 0x558d66897594 <unknown>\n#14 0x558d6685deef <unknown>\n#15 0x558d668bbd98 <unknown>\n#16 0x558d668bbf76 <unknown>\n#17 0x558d668ccb36 <unknown>\n#18 0x7ff395a9caa4 <unknown>\n#19 0x7ff395b29c3c <unknown>","statusTrace":"self = <testScripts.test_addproducts.Test_002_AddProducts object at 0x7f23f2b29950>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a7c4b18f20fd6e546c533bf66112d8f0\")>\n\n    @pytest.mark.order(2)\n    def test_login(self, setup):\n        self.logger.info(\"******** Verifying Login test ********\")\n        self.logger.info(\"********Call the Browser Configuration********\")\n        self.driver = setup\n        self.driver.implicitly_wait(10)\n        self.driver.get(self.baseURL)\n        self.logger.info(\"********Define the LoginPage Driver********\")\n        self.lp = LoginPage(self.driver)\n        time.sleep(5)\n        self.logger.info(\"********Type the Username*******\")\n        self.lp.setUserName(self.username)\n        time.sleep(3)\n        self.logger.info(\"********Type the Password*******\")\n        self.lp.setPassword(self.password)\n        time.sleep(3)\n        self.logger.info(\"******** Click the Log in Button*******\")\n        self.lp.clickLogin()\n        time.sleep(3)\n    \n        self.ap = AddProductPage(self.driver)\n        time.sleep(5)\n>       self.ap.addBackpack()\n\ntestScripts/test_addproducts.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/AddProducts.py:11: in addBackpack\n    WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='inventory_list']//div[1]//div[3]//button[1]\"))).click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a7c4b18f20fd6e546c533bf66112d8f0\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f23f1b5d120>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x558d668cdcea <unknown>\nE       #1 0x558d6637e5f0 <unknown>\nE       #2 0x558d663cfa33 <unknown>\nE       #3 0x558d663cfc21 <unknown>\nE       #4 0x558d6641e274 <unknown>\nE       #5 0x558d663f568d <unknown>\nE       #6 0x558d6641b660 <unknown>\nE       #7 0x558d663f5433 <unknown>\nE       #8 0x558d663c1ea3 <unknown>\nE       #9 0x558d663c2b01 <unknown>\nE       #10 0x558d66892b3b <unknown>\nE       #11 0x558d66896a21 <unknown>\nE       #12 0x558d66879c32 <unknown>\nE       #13 0x558d66897594 <unknown>\nE       #14 0x558d6685deef <unknown>\nE       #15 0x558d668bbd98 <unknown>\nE       #16 0x558d668bbf76 <unknown>\nE       #17 0x558d668ccb36 <unknown>\nE       #18 0x7ff395a9caa4 <unknown>\nE       #19 0x7ff395b29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1744822876687,"stop":1744822876687,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1744822876688,"stop":1744822876688,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x558d668cdcea <unknown>\n#1 0x558d6637e5f0 <unknown>\n#2 0x558d663cfa33 <unknown>\n#3 0x558d663cfc21 <unknown>\n#4 0x558d6641e274 <unknown>\n#5 0x558d663f568d <unknown>\n#6 0x558d6641b660 <unknown>\n#7 0x558d663f5433 <unknown>\n#8 0x558d663c1ea3 <unknown>\n#9 0x558d663c2b01 <unknown>\n#10 0x558d66892b3b <unknown>\n#11 0x558d66896a21 <unknown>\n#12 0x558d66879c32 <unknown>\n#13 0x558d66897594 <unknown>\n#14 0x558d6685deef <unknown>\n#15 0x558d668bbd98 <unknown>\n#16 0x558d668bbf76 <unknown>\n#17 0x558d668ccb36 <unknown>\n#18 0x7ff395a9caa4 <unknown>\n#19 0x7ff395b29c3c <unknown>","statusTrace":"self = <testScripts.test_addproducts.Test_002_AddProducts object at 0x7f23f2b29950>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a7c4b18f20fd6e546c533bf66112d8f0\")>\n\n    @pytest.mark.order(2)\n    def test_login(self, setup):\n        self.logger.info(\"******** Verifying Login test ********\")\n        self.logger.info(\"********Call the Browser Configuration********\")\n        self.driver = setup\n        self.driver.implicitly_wait(10)\n        self.driver.get(self.baseURL)\n        self.logger.info(\"********Define the LoginPage Driver********\")\n        self.lp = LoginPage(self.driver)\n        time.sleep(5)\n        self.logger.info(\"********Type the Username*******\")\n        self.lp.setUserName(self.username)\n        time.sleep(3)\n        self.logger.info(\"********Type the Password*******\")\n        self.lp.setPassword(self.password)\n        time.sleep(3)\n        self.logger.info(\"******** Click the Log in Button*******\")\n        self.lp.clickLogin()\n        time.sleep(3)\n    \n        self.ap = AddProductPage(self.driver)\n        time.sleep(5)\n>       self.ap.addBackpack()\n\ntestScripts/test_addproducts.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/AddProducts.py:11: in addBackpack\n    WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='inventory_list']//div[1]//div[3]//button[1]\"))).click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a7c4b18f20fd6e546c533bf66112d8f0\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f23f1b5d120>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x558d668cdcea <unknown>\nE       #1 0x558d6637e5f0 <unknown>\nE       #2 0x558d663cfa33 <unknown>\nE       #3 0x558d663cfc21 <unknown>\nE       #4 0x558d6641e274 <unknown>\nE       #5 0x558d663f568d <unknown>\nE       #6 0x558d6641b660 <unknown>\nE       #7 0x558d663f5433 <unknown>\nE       #8 0x558d663c1ea3 <unknown>\nE       #9 0x558d663c2b01 <unknown>\nE       #10 0x558d66892b3b <unknown>\nE       #11 0x558d66896a21 <unknown>\nE       #12 0x558d66879c32 <unknown>\nE       #13 0x558d66897594 <unknown>\nE       #14 0x558d6685deef <unknown>\nE       #15 0x558d668bbd98 <unknown>\nE       #16 0x558d668bbf76 <unknown>\nE       #17 0x558d668ccb36 <unknown>\nE       #18 0x7ff395a9caa4 <unknown>\nE       #19 0x7ff395b29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","steps":[],"attachments":[{"uid":"1f7b296532fd4924","name":"log","source":"1f7b296532fd4924.txt","type":"text/plain","size":457}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"tag","value":"order(2)"},{"name":"parentSuite","value":"testScripts"},{"name":"suite","value":"test_addproducts"},{"name":"subSuite","value":"Test_002_AddProducts"},{"name":"host","value":"fv-az1280-241"},{"name":"thread","value":"2785-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testScripts.test_addproducts"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["order(2)"]},"source":"3d9f9de58f189e2d.json","parameterValues":[]}